'use client';
import { useId } from 'react';
import { Form, Formik, Field, ErrorMessage } from 'formik';
import * as Yup from 'yup';
import s from './OrderForm.module.css';
import axios from 'axios';
import { toast, ToastContainer } from 'react-toastify';

const validatePhone = (phone) => {
  return phone
    .split('')
    .reduce((num, el) => (el === ' ' || el === '-' ? num : num + el), '');
};

export default function OrderForm() {
  const fieldId = useId();

  const OrderFormSchema = Yup.object().shape({
    name: Yup.string()
      .min(3, '–Ü–º º—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –∫–æ—Ä–æ—Ç—à–µ 3 —Å–∏–º–≤–æ–ª—ñ–≤')
      .max(20, '–Ü–º º—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ')
      .required('–Ü–º º—è –æ–±–æ–≤ º—è–∑–∫–æ–≤–µ'),
    phone: Yup.string()
      .min(8, '–ù–æ–º–µ—Ä –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –º–µ–Ω—à–µ 8 —Å–∏–º–≤–æ–ª—ñ–≤')
      .required('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±–æ–≤ º—è–∑–∫–æ–≤–∏–π')
      .matches(/^\+?[0-9\s\-()]{10,18}$/, '–ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É'),
  });

  const onFormSubmit = async (values, actions) => {
    const message = `
    <b>–ù–∞ –≤–∞—à–æ–º—É —Å–∞–π—Ç—ñ YourMaster —î –∑–∞–ø–∏—Ç</b>\n
    <b>üë§ –Ü–º‚Äô—è:</b> ${values.name}
    <b>üìû –ü–µ—Ä–µ–¥–∑–≤–æ–Ω—ñ—Ç—å –∑–∞ –Ω–æ–º–µ—Ä–æ–º</b> <a href="tel:${validatePhone(values.phone)}">${validatePhone(values.phone)}</a>
    <b>üìù –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b> ${values.text || '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}
    <b>üìÖ –î–∞—Ç–∞:</b> ${new Date().toLocaleString('uk-UA')}`;

    try {
      axios.post('api/send-message', { text: message });
      toast('–í–∞—à –∑–∞–ø–∏—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æü§© –ú–∏ —Å–∫–æ—Ä–æ –≤–∞–º –ø–µ—Ä–µ–¥–∑–≤–æ–Ω–∏–º–æ, –æ—á—ñ–∫—É–π—Ç–µ!', {
        position: 'top-center',
        autoClose: 3000,
        hideProgressBar: true,
        pauseOnHover: true,
        theme: 'dark',
      });
    } catch (error) {
      console.log(error);
    }
    actions.resetForm();
  };
  return (
    <Formik
      initialValues={{ name: '', phone: '', text: '' }}
      onSubmit={onFormSubmit}
      validationSchema={OrderFormSchema}
    >
      <Form>
        <ToastContainer />
        <div className={s.orderInputWrapper}>
          <label className={s.orderFormLabel} htmlFor={`${fieldId}-name`}>
            –í–∞—à–µ —ñ–º º—è*
          </label>
          <Field
            className={s.orderFormInput}
            type="text"
            name="name"
            id={`${fieldId}-name`}
            placeholder="–û–ª–µ–∫—Å–∞–Ω–¥—Ä"
          />
          <ErrorMessage
            name="name"
            component="span"
            className={s.errorMessage}
          />
        </div>
        <div className={s.orderInputWrapper}>
          <label className={s.orderFormLabel} htmlFor={`${fieldId}-phone`}>
            –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É*
          </label>
          <Field
            className={s.orderFormInput}
            type="tel"
            name="phone"
            id={`${fieldId}-phone`}
            placeholder="067-777-77-77"
          />
          <ErrorMessage
            name="phone"
            component="span"
            className={s.errorMessage}
          />
        </div>
        <div className={s.orderInputWrapper}>
          <label className={s.orderFormLabel} htmlFor={`${fieldId}-text`}>
            –ú–æ–∂–µ—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—Å–∞—Ç–∏ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è
          </label>
          <Field
            as="textarea"
            className={s.orderFormTextarea}
            name="text"
            id={`${fieldId}-text`}
          />
          <ErrorMessage
            name="text"
            component="span"
            className={s.errorMessage}
          />
        </div>
        <button className={s.orderFormBtn} type="submit">
          –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞—è–≤–∫—É
        </button>
      </Form>
    </Formik>
  );
}
